"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@divvi";
exports.ids = ["vendor-chunks/@divvi"];
exports.modules = {

/***/ "(ssr)/./node_modules/@divvi/referral-sdk/dist/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@divvi/referral-sdk/dist/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.REFERRAL_TAG_FORMAT_1_BYTE = exports.DIVVI_MAGIC_PREFIX = void 0;\n// Magic prefix is keccak256(\"divvi\").slice(2, 10)\nexports.DIVVI_MAGIC_PREFIX = '6decb85d';\n/**\n * Format byte for referral tag encoding (format 1).\n * Represented as a 2-character hex string (1 byte).\n */\nexports.REFERRAL_TAG_FORMAT_1_BYTE = '01';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpdnZpL3JlZmVycmFsLXNkay9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRywwQkFBMEI7QUFDL0Q7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSFBcXERlc2t0b3BcXHByb29mT2ZTaGlwXFxyYW5kb2JldC1yZVxcZmVcXG5vZGVfbW9kdWxlc1xcQGRpdnZpXFxyZWZlcnJhbC1zZGtcXGRpc3RcXGNvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUkVGRVJSQUxfVEFHX0ZPUk1BVF8xX0JZVEUgPSBleHBvcnRzLkRJVlZJX01BR0lDX1BSRUZJWCA9IHZvaWQgMDtcbi8vIE1hZ2ljIHByZWZpeCBpcyBrZWNjYWsyNTYoXCJkaXZ2aVwiKS5zbGljZSgyLCAxMClcbmV4cG9ydHMuRElWVklfTUFHSUNfUFJFRklYID0gJzZkZWNiODVkJztcbi8qKlxuICogRm9ybWF0IGJ5dGUgZm9yIHJlZmVycmFsIHRhZyBlbmNvZGluZyAoZm9ybWF0IDEpLlxuICogUmVwcmVzZW50ZWQgYXMgYSAyLWNoYXJhY3RlciBoZXggc3RyaW5nICgxIGJ5dGUpLlxuICovXG5leHBvcnRzLlJFRkVSUkFMX1RBR19GT1JNQVRfMV9CWVRFID0gJzAxJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@divvi/referral-sdk/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@divvi/referral-sdk/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@divvi/referral-sdk/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvalidAddressError = void 0;\nexports.getReferralTag = getReferralTag;\nexports.submitReferral = submitReferral;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@divvi/referral-sdk/dist/constants.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@divvi/referral-sdk/dist/types.js\");\n// Helper function to validate Ethereum addresses\nfunction isValidAddress(address) {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n// Helper function to pad hex string to 32 bytes (64 characters)\nfunction padHex(hex) {\n    return hex.padStart(64, '0');\n}\n// Helper function to encode a single address\nfunction encodeAddress(address) {\n    return padHex(address.slice(2).toLowerCase());\n}\n// Helper function to encode an array of addresses\nfunction encodeAddressArray(addresses) {\n    // Calculate the offset to where the array data starts\n    // This offset accounts for all static fields that come BEFORE this dynamic array:\n    // - encodedUser: 32 bytes\n    // - encodedConsumer: 32 bytes\n    // - providers array offset (this field): 32 bytes\n    // Total static data before array content: 3 Ã— 32 = 96 bytes\n    //\n    // NOTE: When updating the ABI structure, update this calculation\n    const arrayDataOffsetHex = (96).toString(16).padStart(64, '0');\n    // Encode the length of the array (32 bytes)\n    const arrayLengthHex = addresses.length.toString(16).padStart(64, '0');\n    // Encode each address (32 bytes each)\n    const addressesHex = addresses.map((addr) => encodeAddress(addr)).join('');\n    return arrayDataOffsetHex + arrayLengthHex + addressesHex;\n}\n/**\n * Generates the referral tag for the Divvi referral system.\n *\n * @param params - The parameters for generating the referral tag.\n * @param params.user - The user address that consented to the transaction. This is cryptographically verified on the backend to ensure accurate referral attribution.\n * @param params.consumer - The consumer address.\n * @param params.providers - An array of provider addresses. Defaults to an empty array.\n * @returns The referral tag as a hex string.\n */\nfunction getReferralTag({ user, consumer, providers = [], }) {\n    // Validate addresses\n    if (!isValidAddress(user)) {\n        throw new types_1.InvalidAddressError({ address: user });\n    }\n    if (!isValidAddress(consumer)) {\n        throw new types_1.InvalidAddressError({ address: consumer });\n    }\n    for (const provider of providers) {\n        if (!isValidAddress(provider)) {\n            throw new types_1.InvalidAddressError({ address: provider });\n        }\n    }\n    // Encode the data according to ABI encoding rules\n    const encodedUser = encodeAddress(user);\n    const encodedConsumer = encodeAddress(consumer);\n    const encodedProviders = encodeAddressArray(providers);\n    const encodedBytes = encodedUser + encodedConsumer + encodedProviders;\n    // Calculate the length of the payload (in bytes)\n    const payloadLength = encodedBytes.length / 2;\n    const payloadLengthHex = payloadLength.toString(16).padStart(4, '0');\n    // Combine all parts\n    return (constants_1.DIVVI_MAGIC_PREFIX +\n        constants_1.REFERRAL_TAG_FORMAT_1_BYTE +\n        payloadLengthHex +\n        encodedBytes);\n}\n/**\n * Posts an attribution event to the tracking API\n *\n * @param params - The parameters for the attribution event\n * @param params.txHash - The transaction hash (for transaction-based referrals)\n * @param params.message - The signed message (for signed message-based referrals, can be string or Hex)\n * @param params.signature - The signature of the message (for signed message-based referrals)\n * @param params.chainId - The chain ID\n * @param params.baseUrl - The base URL for the API endpoint (optional)\n * @returns A promise that resolves to the response from the API\n * @throws {Error} Client error (4xx) - When the request fails due to client-side issues\n * @throws {Error} Server error (5xx) - When the request fails due to server-side issues, client should retry the request\n */\nasync function submitReferral(params) {\n    const { chainId, baseUrl = 'https://api.divvi.xyz/submitReferral' } = params;\n    let body;\n    if ('txHash' in params) {\n        // Transaction-based referral\n        body = {\n            txHash: params.txHash,\n            chainId,\n        };\n    }\n    else {\n        // Signed message-based referral\n        body = {\n            message: params.message,\n            signature: params.signature,\n            chainId,\n        };\n    }\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    if (params.divviApiKey) {\n        headers['X-Divvi-Api-Key'] = params.divviApiKey;\n    }\n    const response = await fetch(baseUrl, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(body),\n    });\n    if (!response.ok) {\n        // Handle 4xx client errors\n        if (response.status >= 400 && response.status < 500) {\n            const errorResponse = await response.text();\n            throw new Error(`Client error: ${response.status} ${response.statusText} ${errorResponse}`);\n        }\n        // Handle all other errors (5xx server errors, etc.)\n        throw new Error(`Server error: Failed to submit referral event: ${response.statusText}. Client should retry the request.`);\n    }\n    return response;\n}\n// Re-export only the types that are needed for the public API\nvar types_2 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@divvi/referral-sdk/dist/types.js\");\nObject.defineProperty(exports, \"InvalidAddressError\", ({ enumerable: true, get: function () { return types_2.InvalidAddressError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@divvi/referral-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@divvi/referral-sdk/dist/types.js":
/*!********************************************************!*\
  !*** ./node_modules/@divvi/referral-sdk/dist/types.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvalidAddressError = void 0;\nclass InvalidAddressError extends Error {\n    constructor({ address }) {\n        super(`Invalid Ethereum address: ${address}`);\n        this.name = 'InvalidAddressError';\n    }\n}\nexports.InvalidAddressError = InvalidAddressError;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpdnZpL3JlZmVycmFsLXNkay9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQjtBQUNBLGtCQUFrQixTQUFTO0FBQzNCLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxIUFxcRGVza3RvcFxccHJvb2ZPZlNoaXBcXHJhbmRvYmV0LXJlXFxmZVxcbm9kZV9tb2R1bGVzXFxAZGl2dmlcXHJlZmVycmFsLXNka1xcZGlzdFxcdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludmFsaWRBZGRyZXNzRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBJbnZhbGlkQWRkcmVzc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgYWRkcmVzcyB9KSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIEV0aGVyZXVtIGFkZHJlc3M6ICR7YWRkcmVzc31gKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0ludmFsaWRBZGRyZXNzRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZEFkZHJlc3NFcnJvciA9IEludmFsaWRBZGRyZXNzRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@divvi/referral-sdk/dist/types.js\n");

/***/ })

};
;